// Code generated by "enumer -type=ActionStyle -json -transform=title-lower -trimprefix=ActionStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActionStyleName = "defaultpositivedestructive"

var _ActionStyleIndex = [...]uint8{0, 7, 15, 26}

const _ActionStyleLowerName = "defaultpositivedestructive"

func (i ActionStyle) String() string {
	if i < 0 || i >= ActionStyle(len(_ActionStyleIndex)-1) {
		return fmt.Sprintf("ActionStyle(%d)", i)
	}
	return _ActionStyleName[_ActionStyleIndex[i]:_ActionStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionStyleNoOp() {
	var x [1]struct{}
	_ = x[ActionStyleDefault-(0)]
	_ = x[ActionStylePositive-(1)]
	_ = x[ActionStyleDestructive-(2)]
}

var _ActionStyleValues = []ActionStyle{ActionStyleDefault, ActionStylePositive, ActionStyleDestructive}

var _ActionStyleNameToValueMap = map[string]ActionStyle{
	_ActionStyleName[0:7]:        ActionStyleDefault,
	_ActionStyleLowerName[0:7]:   ActionStyleDefault,
	_ActionStyleName[7:15]:       ActionStylePositive,
	_ActionStyleLowerName[7:15]:  ActionStylePositive,
	_ActionStyleName[15:26]:      ActionStyleDestructive,
	_ActionStyleLowerName[15:26]: ActionStyleDestructive,
}

var _ActionStyleNames = []string{
	_ActionStyleName[0:7],
	_ActionStyleName[7:15],
	_ActionStyleName[15:26],
}

// ActionStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionStyleString(s string) (ActionStyle, error) {
	if val, ok := _ActionStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActionStyle values", s)
}

// ActionStyleValues returns all values of the enum
func ActionStyleValues() []ActionStyle {
	return _ActionStyleValues
}

// ActionStyleStrings returns a slice of all String values of the enum
func ActionStyleStrings() []string {
	strs := make([]string, len(_ActionStyleNames))
	copy(strs, _ActionStyleNames)
	return strs
}

// IsAActionStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActionStyle) IsAActionStyle() bool {
	for _, v := range _ActionStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActionStyle
func (i ActionStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActionStyle
func (i *ActionStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActionStyle should be a string, got %s", data)
	}

	var err error
	*i, err = ActionStyleString(s)
	return err
}
