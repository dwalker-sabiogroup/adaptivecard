// Code generated by "enumer -type=TextInputStyle -json -transform=title-lower -trimprefix=TextInputStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TextInputStyleName = "texttelurlemailpassword"

var _TextInputStyleIndex = [...]uint8{0, 4, 7, 10, 15, 23}

const _TextInputStyleLowerName = "texttelurlemailpassword"

func (i TextInputStyle) String() string {
	if i < 0 || i >= TextInputStyle(len(_TextInputStyleIndex)-1) {
		return fmt.Sprintf("TextInputStyle(%d)", i)
	}
	return _TextInputStyleName[_TextInputStyleIndex[i]:_TextInputStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TextInputStyleNoOp() {
	var x [1]struct{}
	_ = x[TextInputStyleText-(0)]
	_ = x[TextInputStyleTel-(1)]
	_ = x[TextInputStyleUrl-(2)]
	_ = x[TextInputStyleEmail-(3)]
	_ = x[TextInputStylePassword-(4)]
}

var _TextInputStyleValues = []TextInputStyle{TextInputStyleText, TextInputStyleTel, TextInputStyleUrl, TextInputStyleEmail, TextInputStylePassword}

var _TextInputStyleNameToValueMap = map[string]TextInputStyle{
	_TextInputStyleName[0:4]:        TextInputStyleText,
	_TextInputStyleLowerName[0:4]:   TextInputStyleText,
	_TextInputStyleName[4:7]:        TextInputStyleTel,
	_TextInputStyleLowerName[4:7]:   TextInputStyleTel,
	_TextInputStyleName[7:10]:       TextInputStyleUrl,
	_TextInputStyleLowerName[7:10]:  TextInputStyleUrl,
	_TextInputStyleName[10:15]:      TextInputStyleEmail,
	_TextInputStyleLowerName[10:15]: TextInputStyleEmail,
	_TextInputStyleName[15:23]:      TextInputStylePassword,
	_TextInputStyleLowerName[15:23]: TextInputStylePassword,
}

var _TextInputStyleNames = []string{
	_TextInputStyleName[0:4],
	_TextInputStyleName[4:7],
	_TextInputStyleName[7:10],
	_TextInputStyleName[10:15],
	_TextInputStyleName[15:23],
}

// TextInputStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TextInputStyleString(s string) (TextInputStyle, error) {
	if val, ok := _TextInputStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TextInputStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TextInputStyle values", s)
}

// TextInputStyleValues returns all values of the enum
func TextInputStyleValues() []TextInputStyle {
	return _TextInputStyleValues
}

// TextInputStyleStrings returns a slice of all String values of the enum
func TextInputStyleStrings() []string {
	strs := make([]string, len(_TextInputStyleNames))
	copy(strs, _TextInputStyleNames)
	return strs
}

// IsATextInputStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TextInputStyle) IsATextInputStyle() bool {
	for _, v := range _TextInputStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TextInputStyle
func (i TextInputStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TextInputStyle
func (i *TextInputStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TextInputStyle should be a string, got %s", data)
	}

	var err error
	*i, err = TextInputStyleString(s)
	return err
}
