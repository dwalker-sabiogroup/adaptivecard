// Code generated by "enumer -type=ImageSetStyle -json -transform=title-lower -trimprefix=ImageSetStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ImageSetStyleName = "defaultstackedgrid"

var _ImageSetStyleIndex = [...]uint8{0, 7, 14, 18}

const _ImageSetStyleLowerName = "defaultstackedgrid"

func (i ImageSetStyle) String() string {
	if i < 0 || i >= ImageSetStyle(len(_ImageSetStyleIndex)-1) {
		return fmt.Sprintf("ImageSetStyle(%d)", i)
	}
	return _ImageSetStyleName[_ImageSetStyleIndex[i]:_ImageSetStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ImageSetStyleNoOp() {
	var x [1]struct{}
	_ = x[ImageSetStyleDefault-(0)]
	_ = x[ImageSetStyleStacked-(1)]
	_ = x[ImageSetStyleGrid-(2)]
}

var _ImageSetStyleValues = []ImageSetStyle{ImageSetStyleDefault, ImageSetStyleStacked, ImageSetStyleGrid}

var _ImageSetStyleNameToValueMap = map[string]ImageSetStyle{
	_ImageSetStyleName[0:7]:        ImageSetStyleDefault,
	_ImageSetStyleLowerName[0:7]:   ImageSetStyleDefault,
	_ImageSetStyleName[7:14]:       ImageSetStyleStacked,
	_ImageSetStyleLowerName[7:14]:  ImageSetStyleStacked,
	_ImageSetStyleName[14:18]:      ImageSetStyleGrid,
	_ImageSetStyleLowerName[14:18]: ImageSetStyleGrid,
}

var _ImageSetStyleNames = []string{
	_ImageSetStyleName[0:7],
	_ImageSetStyleName[7:14],
	_ImageSetStyleName[14:18],
}

// ImageSetStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImageSetStyleString(s string) (ImageSetStyle, error) {
	if val, ok := _ImageSetStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ImageSetStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImageSetStyle values", s)
}

// ImageSetStyleValues returns all values of the enum
func ImageSetStyleValues() []ImageSetStyle {
	return _ImageSetStyleValues
}

// ImageSetStyleStrings returns a slice of all String values of the enum
func ImageSetStyleStrings() []string {
	strs := make([]string, len(_ImageSetStyleNames))
	copy(strs, _ImageSetStyleNames)
	return strs
}

// IsAImageSetStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImageSetStyle) IsAImageSetStyle() bool {
	for _, v := range _ImageSetStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ImageSetStyle
func (i ImageSetStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ImageSetStyle
func (i *ImageSetStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ImageSetStyle should be a string, got %s", data)
	}

	var err error
	*i, err = ImageSetStyleString(s)
	return err
}
