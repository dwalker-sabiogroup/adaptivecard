// Code generated by "enumer -type=ImageFillMode -json -transform=title-lower -trimprefix=ImageFillMode"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ImageFillModeName = "coverrepeatHorizontallyrepeatVerticallyrepeat"

var _ImageFillModeIndex = [...]uint8{0, 5, 23, 39, 45}

const _ImageFillModeLowerName = "coverrepeathorizontallyrepeatverticallyrepeat"

func (i ImageFillMode) String() string {
	if i < 0 || i >= ImageFillMode(len(_ImageFillModeIndex)-1) {
		return fmt.Sprintf("ImageFillMode(%d)", i)
	}
	return _ImageFillModeName[_ImageFillModeIndex[i]:_ImageFillModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ImageFillModeNoOp() {
	var x [1]struct{}
	_ = x[ImageFillModeCover-(0)]
	_ = x[ImageFillModeRepeatHorizontally-(1)]
	_ = x[ImageFillModeRepeatVertically-(2)]
	_ = x[ImageFillModeRepeat-(3)]
}

var _ImageFillModeValues = []ImageFillMode{ImageFillModeCover, ImageFillModeRepeatHorizontally, ImageFillModeRepeatVertically, ImageFillModeRepeat}

var _ImageFillModeNameToValueMap = map[string]ImageFillMode{
	_ImageFillModeName[0:5]:        ImageFillModeCover,
	_ImageFillModeLowerName[0:5]:   ImageFillModeCover,
	_ImageFillModeName[5:23]:       ImageFillModeRepeatHorizontally,
	_ImageFillModeLowerName[5:23]:  ImageFillModeRepeatHorizontally,
	_ImageFillModeName[23:39]:      ImageFillModeRepeatVertically,
	_ImageFillModeLowerName[23:39]: ImageFillModeRepeatVertically,
	_ImageFillModeName[39:45]:      ImageFillModeRepeat,
	_ImageFillModeLowerName[39:45]: ImageFillModeRepeat,
}

var _ImageFillModeNames = []string{
	_ImageFillModeName[0:5],
	_ImageFillModeName[5:23],
	_ImageFillModeName[23:39],
	_ImageFillModeName[39:45],
}

// ImageFillModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImageFillModeString(s string) (ImageFillMode, error) {
	if val, ok := _ImageFillModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ImageFillModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImageFillMode values", s)
}

// ImageFillModeValues returns all values of the enum
func ImageFillModeValues() []ImageFillMode {
	return _ImageFillModeValues
}

// ImageFillModeStrings returns a slice of all String values of the enum
func ImageFillModeStrings() []string {
	strs := make([]string, len(_ImageFillModeNames))
	copy(strs, _ImageFillModeNames)
	return strs
}

// IsAImageFillMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImageFillMode) IsAImageFillMode() bool {
	for _, v := range _ImageFillModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ImageFillMode
func (i ImageFillMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ImageFillMode
func (i *ImageFillMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ImageFillMode should be a string, got %s", data)
	}

	var err error
	*i, err = ImageFillModeString(s)
	return err
}
