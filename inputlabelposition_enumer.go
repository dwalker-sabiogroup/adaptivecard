// Code generated by "enumer -type=InputLabelPosition -json -transform=title-lower -trimprefix=InputLabelPosition"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _InputLabelPositionName = "aboveinline"

var _InputLabelPositionIndex = [...]uint8{0, 5, 11}

const _InputLabelPositionLowerName = "aboveinline"

func (i InputLabelPosition) String() string {
	if i < 0 || i >= InputLabelPosition(len(_InputLabelPositionIndex)-1) {
		return fmt.Sprintf("InputLabelPosition(%d)", i)
	}
	return _InputLabelPositionName[_InputLabelPositionIndex[i]:_InputLabelPositionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputLabelPositionNoOp() {
	var x [1]struct{}
	_ = x[InputLabelPositionAbove-(0)]
	_ = x[InputLabelPositionInline-(1)]
}

var _InputLabelPositionValues = []InputLabelPosition{InputLabelPositionAbove, InputLabelPositionInline}

var _InputLabelPositionNameToValueMap = map[string]InputLabelPosition{
	_InputLabelPositionName[0:5]:       InputLabelPositionAbove,
	_InputLabelPositionLowerName[0:5]:  InputLabelPositionAbove,
	_InputLabelPositionName[5:11]:      InputLabelPositionInline,
	_InputLabelPositionLowerName[5:11]: InputLabelPositionInline,
}

var _InputLabelPositionNames = []string{
	_InputLabelPositionName[0:5],
	_InputLabelPositionName[5:11],
}

// InputLabelPositionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputLabelPositionString(s string) (InputLabelPosition, error) {
	if val, ok := _InputLabelPositionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputLabelPositionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputLabelPosition values", s)
}

// InputLabelPositionValues returns all values of the enum
func InputLabelPositionValues() []InputLabelPosition {
	return _InputLabelPositionValues
}

// InputLabelPositionStrings returns a slice of all String values of the enum
func InputLabelPositionStrings() []string {
	strs := make([]string, len(_InputLabelPositionNames))
	copy(strs, _InputLabelPositionNames)
	return strs
}

// IsAInputLabelPosition returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputLabelPosition) IsAInputLabelPosition() bool {
	for _, v := range _InputLabelPositionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for InputLabelPosition
func (i InputLabelPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for InputLabelPosition
func (i *InputLabelPosition) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("InputLabelPosition should be a string, got %s", data)
	}

	var err error
	*i, err = InputLabelPositionString(s)
	return err
}
