// Code generated by "enumer -type=TextBlockStyle -json -transform=title-lower -trimprefix=TextBlockStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TextBlockStyleName = "defaultheading"

var _TextBlockStyleIndex = [...]uint8{0, 7, 14}

const _TextBlockStyleLowerName = "defaultheading"

func (i TextBlockStyle) String() string {
	if i < 0 || i >= TextBlockStyle(len(_TextBlockStyleIndex)-1) {
		return fmt.Sprintf("TextBlockStyle(%d)", i)
	}
	return _TextBlockStyleName[_TextBlockStyleIndex[i]:_TextBlockStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TextBlockStyleNoOp() {
	var x [1]struct{}
	_ = x[TextBlockStyleDefault-(0)]
	_ = x[TextBlockStyleHeading-(1)]
}

var _TextBlockStyleValues = []TextBlockStyle{TextBlockStyleDefault, TextBlockStyleHeading}

var _TextBlockStyleNameToValueMap = map[string]TextBlockStyle{
	_TextBlockStyleName[0:7]:       TextBlockStyleDefault,
	_TextBlockStyleLowerName[0:7]:  TextBlockStyleDefault,
	_TextBlockStyleName[7:14]:      TextBlockStyleHeading,
	_TextBlockStyleLowerName[7:14]: TextBlockStyleHeading,
}

var _TextBlockStyleNames = []string{
	_TextBlockStyleName[0:7],
	_TextBlockStyleName[7:14],
}

// TextBlockStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TextBlockStyleString(s string) (TextBlockStyle, error) {
	if val, ok := _TextBlockStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TextBlockStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TextBlockStyle values", s)
}

// TextBlockStyleValues returns all values of the enum
func TextBlockStyleValues() []TextBlockStyle {
	return _TextBlockStyleValues
}

// TextBlockStyleStrings returns a slice of all String values of the enum
func TextBlockStyleStrings() []string {
	strs := make([]string, len(_TextBlockStyleNames))
	copy(strs, _TextBlockStyleNames)
	return strs
}

// IsATextBlockStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TextBlockStyle) IsATextBlockStyle() bool {
	for _, v := range _TextBlockStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TextBlockStyle
func (i TextBlockStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TextBlockStyle
func (i *TextBlockStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TextBlockStyle should be a string, got %s", data)
	}

	var err error
	*i, err = TextBlockStyleString(s)
	return err
}
