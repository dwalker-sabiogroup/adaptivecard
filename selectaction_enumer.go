// Code generated by "enumer -type=SelectAction -json -linecomment"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SelectActionName = "Action.ExecuteAction.OpenUrlAction.SubmitAction.ToggleVisibility"

var _SelectActionIndex = [...]uint8{0, 14, 28, 41, 64}

const _SelectActionLowerName = "action.executeaction.openurlaction.submitaction.togglevisibility"

func (i SelectAction) String() string {
	if i < 0 || i >= SelectAction(len(_SelectActionIndex)-1) {
		return fmt.Sprintf("SelectAction(%d)", i)
	}
	return _SelectActionName[_SelectActionIndex[i]:_SelectActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SelectActionNoOp() {
	var x [1]struct{}
	_ = x[SelectActionExecute-(0)]
	_ = x[SelectActionOpenURL-(1)]
	_ = x[SelectActionSubmit-(2)]
	_ = x[SelectActionToggleVisibility-(3)]
}

var _SelectActionValues = []SelectAction{SelectActionExecute, SelectActionOpenURL, SelectActionSubmit, SelectActionToggleVisibility}

var _SelectActionNameToValueMap = map[string]SelectAction{
	_SelectActionName[0:14]:       SelectActionExecute,
	_SelectActionLowerName[0:14]:  SelectActionExecute,
	_SelectActionName[14:28]:      SelectActionOpenURL,
	_SelectActionLowerName[14:28]: SelectActionOpenURL,
	_SelectActionName[28:41]:      SelectActionSubmit,
	_SelectActionLowerName[28:41]: SelectActionSubmit,
	_SelectActionName[41:64]:      SelectActionToggleVisibility,
	_SelectActionLowerName[41:64]: SelectActionToggleVisibility,
}

var _SelectActionNames = []string{
	_SelectActionName[0:14],
	_SelectActionName[14:28],
	_SelectActionName[28:41],
	_SelectActionName[41:64],
}

// SelectActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SelectActionString(s string) (SelectAction, error) {
	if val, ok := _SelectActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SelectActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SelectAction values", s)
}

// SelectActionValues returns all values of the enum
func SelectActionValues() []SelectAction {
	return _SelectActionValues
}

// SelectActionStrings returns a slice of all String values of the enum
func SelectActionStrings() []string {
	strs := make([]string, len(_SelectActionNames))
	copy(strs, _SelectActionNames)
	return strs
}

// IsASelectAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SelectAction) IsASelectAction() bool {
	for _, v := range _SelectActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SelectAction
func (i SelectAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SelectAction
func (i *SelectAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SelectAction should be a string, got %s", data)
	}

	var err error
	*i, err = SelectActionString(s)
	return err
}
