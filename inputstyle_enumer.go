// Code generated by "enumer -type=InputStyle -json -transform=title-lower -trimprefix=InputStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _InputStyleName = "defaultrevealOnHover"

var _InputStyleIndex = [...]uint8{0, 7, 20}

const _InputStyleLowerName = "defaultrevealonhover"

func (i InputStyle) String() string {
	if i < 0 || i >= InputStyle(len(_InputStyleIndex)-1) {
		return fmt.Sprintf("InputStyle(%d)", i)
	}
	return _InputStyleName[_InputStyleIndex[i]:_InputStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _InputStyleNoOp() {
	var x [1]struct{}
	_ = x[InputStyleDefault-(0)]
	_ = x[InputStyleRevealOnHover-(1)]
}

var _InputStyleValues = []InputStyle{InputStyleDefault, InputStyleRevealOnHover}

var _InputStyleNameToValueMap = map[string]InputStyle{
	_InputStyleName[0:7]:       InputStyleDefault,
	_InputStyleLowerName[0:7]:  InputStyleDefault,
	_InputStyleName[7:20]:      InputStyleRevealOnHover,
	_InputStyleLowerName[7:20]: InputStyleRevealOnHover,
}

var _InputStyleNames = []string{
	_InputStyleName[0:7],
	_InputStyleName[7:20],
}

// InputStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func InputStyleString(s string) (InputStyle, error) {
	if val, ok := _InputStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _InputStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to InputStyle values", s)
}

// InputStyleValues returns all values of the enum
func InputStyleValues() []InputStyle {
	return _InputStyleValues
}

// InputStyleStrings returns a slice of all String values of the enum
func InputStyleStrings() []string {
	strs := make([]string, len(_InputStyleNames))
	copy(strs, _InputStyleNames)
	return strs
}

// IsAInputStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i InputStyle) IsAInputStyle() bool {
	for _, v := range _InputStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for InputStyle
func (i InputStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for InputStyle
func (i *InputStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("InputStyle should be a string, got %s", data)
	}

	var err error
	*i, err = InputStyleString(s)
	return err
}
