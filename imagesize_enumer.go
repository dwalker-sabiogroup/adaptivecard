// Code generated by "enumer -type=ImageSize -json -transform=title-lower -trimprefix=ImageSize"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ImageSizeName = "autostretchsmallmediumlarge"

var _ImageSizeIndex = [...]uint8{0, 4, 11, 16, 22, 27}

const _ImageSizeLowerName = "autostretchsmallmediumlarge"

func (i ImageSize) String() string {
	if i < 0 || i >= ImageSize(len(_ImageSizeIndex)-1) {
		return fmt.Sprintf("ImageSize(%d)", i)
	}
	return _ImageSizeName[_ImageSizeIndex[i]:_ImageSizeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ImageSizeNoOp() {
	var x [1]struct{}
	_ = x[ImageSizeAuto-(0)]
	_ = x[ImageSizeStretch-(1)]
	_ = x[ImageSizeSmall-(2)]
	_ = x[ImageSizeMedium-(3)]
	_ = x[ImageSizeLarge-(4)]
}

var _ImageSizeValues = []ImageSize{ImageSizeAuto, ImageSizeStretch, ImageSizeSmall, ImageSizeMedium, ImageSizeLarge}

var _ImageSizeNameToValueMap = map[string]ImageSize{
	_ImageSizeName[0:4]:        ImageSizeAuto,
	_ImageSizeLowerName[0:4]:   ImageSizeAuto,
	_ImageSizeName[4:11]:       ImageSizeStretch,
	_ImageSizeLowerName[4:11]:  ImageSizeStretch,
	_ImageSizeName[11:16]:      ImageSizeSmall,
	_ImageSizeLowerName[11:16]: ImageSizeSmall,
	_ImageSizeName[16:22]:      ImageSizeMedium,
	_ImageSizeLowerName[16:22]: ImageSizeMedium,
	_ImageSizeName[22:27]:      ImageSizeLarge,
	_ImageSizeLowerName[22:27]: ImageSizeLarge,
}

var _ImageSizeNames = []string{
	_ImageSizeName[0:4],
	_ImageSizeName[4:11],
	_ImageSizeName[11:16],
	_ImageSizeName[16:22],
	_ImageSizeName[22:27],
}

// ImageSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImageSizeString(s string) (ImageSize, error) {
	if val, ok := _ImageSizeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ImageSizeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImageSize values", s)
}

// ImageSizeValues returns all values of the enum
func ImageSizeValues() []ImageSize {
	return _ImageSizeValues
}

// ImageSizeStrings returns a slice of all String values of the enum
func ImageSizeStrings() []string {
	strs := make([]string, len(_ImageSizeNames))
	copy(strs, _ImageSizeNames)
	return strs
}

// IsAImageSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImageSize) IsAImageSize() bool {
	for _, v := range _ImageSizeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ImageSize
func (i ImageSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ImageSize
func (i *ImageSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ImageSize should be a string, got %s", data)
	}

	var err error
	*i, err = ImageSizeString(s)
	return err
}
