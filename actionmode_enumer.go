// Code generated by "enumer -type=ActionMode -json -transform=title-lower -trimprefix=ActionMode"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ActionModeName = "primarysecondary"

var _ActionModeIndex = [...]uint8{0, 7, 16}

const _ActionModeLowerName = "primarysecondary"

func (i ActionMode) String() string {
	if i < 0 || i >= ActionMode(len(_ActionModeIndex)-1) {
		return fmt.Sprintf("ActionMode(%d)", i)
	}
	return _ActionModeName[_ActionModeIndex[i]:_ActionModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ActionModeNoOp() {
	var x [1]struct{}
	_ = x[ActionModePrimary-(0)]
	_ = x[ActionModeSecondary-(1)]
}

var _ActionModeValues = []ActionMode{ActionModePrimary, ActionModeSecondary}

var _ActionModeNameToValueMap = map[string]ActionMode{
	_ActionModeName[0:7]:       ActionModePrimary,
	_ActionModeLowerName[0:7]:  ActionModePrimary,
	_ActionModeName[7:16]:      ActionModeSecondary,
	_ActionModeLowerName[7:16]: ActionModeSecondary,
}

var _ActionModeNames = []string{
	_ActionModeName[0:7],
	_ActionModeName[7:16],
}

// ActionModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ActionModeString(s string) (ActionMode, error) {
	if val, ok := _ActionModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ActionModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ActionMode values", s)
}

// ActionModeValues returns all values of the enum
func ActionModeValues() []ActionMode {
	return _ActionModeValues
}

// ActionModeStrings returns a slice of all String values of the enum
func ActionModeStrings() []string {
	strs := make([]string, len(_ActionModeNames))
	copy(strs, _ActionModeNames)
	return strs
}

// IsAActionMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ActionMode) IsAActionMode() bool {
	for _, v := range _ActionModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ActionMode
func (i ActionMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ActionMode
func (i *ActionMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ActionMode should be a string, got %s", data)
	}

	var err error
	*i, err = ActionModeString(s)
	return err
}
