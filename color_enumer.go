// Code generated by "enumer -type=Color -json -transform=title-lower -trimprefix=Color"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ColorName = "defaultdarklightaccentgoodwarningattention"

var _ColorIndex = [...]uint8{0, 7, 11, 16, 22, 26, 33, 42}

const _ColorLowerName = "defaultdarklightaccentgoodwarningattention"

func (i Color) String() string {
	if i < 0 || i >= Color(len(_ColorIndex)-1) {
		return fmt.Sprintf("Color(%d)", i)
	}
	return _ColorName[_ColorIndex[i]:_ColorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ColorNoOp() {
	var x [1]struct{}
	_ = x[ColorDefault-(0)]
	_ = x[ColorDark-(1)]
	_ = x[ColorLight-(2)]
	_ = x[ColorAccent-(3)]
	_ = x[ColorGood-(4)]
	_ = x[ColorWarning-(5)]
	_ = x[ColorAttention-(6)]
}

var _ColorValues = []Color{ColorDefault, ColorDark, ColorLight, ColorAccent, ColorGood, ColorWarning, ColorAttention}

var _ColorNameToValueMap = map[string]Color{
	_ColorName[0:7]:        ColorDefault,
	_ColorLowerName[0:7]:   ColorDefault,
	_ColorName[7:11]:       ColorDark,
	_ColorLowerName[7:11]:  ColorDark,
	_ColorName[11:16]:      ColorLight,
	_ColorLowerName[11:16]: ColorLight,
	_ColorName[16:22]:      ColorAccent,
	_ColorLowerName[16:22]: ColorAccent,
	_ColorName[22:26]:      ColorGood,
	_ColorLowerName[22:26]: ColorGood,
	_ColorName[26:33]:      ColorWarning,
	_ColorLowerName[26:33]: ColorWarning,
	_ColorName[33:42]:      ColorAttention,
	_ColorLowerName[33:42]: ColorAttention,
}

var _ColorNames = []string{
	_ColorName[0:7],
	_ColorName[7:11],
	_ColorName[11:16],
	_ColorName[16:22],
	_ColorName[22:26],
	_ColorName[26:33],
	_ColorName[33:42],
}

// ColorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorString(s string) (Color, error) {
	if val, ok := _ColorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ColorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Color values", s)
}

// ColorValues returns all values of the enum
func ColorValues() []Color {
	return _ColorValues
}

// ColorStrings returns a slice of all String values of the enum
func ColorStrings() []string {
	strs := make([]string, len(_ColorNames))
	copy(strs, _ColorNames)
	return strs
}

// IsAColor returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Color) IsAColor() bool {
	for _, v := range _ColorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Color
func (i Color) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Color
func (i *Color) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Color should be a string, got %s", data)
	}

	var err error
	*i, err = ColorString(s)
	return err
}
