// Code generated by "enumer -type=VerticalAlignment -json -transform=title-lower -trimprefix=VerticalAlignment"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _VerticalAlignmentName = "topcenterbottom"

var _VerticalAlignmentIndex = [...]uint8{0, 3, 9, 15}

const _VerticalAlignmentLowerName = "topcenterbottom"

func (i VerticalAlignment) String() string {
	if i < 0 || i >= VerticalAlignment(len(_VerticalAlignmentIndex)-1) {
		return fmt.Sprintf("VerticalAlignment(%d)", i)
	}
	return _VerticalAlignmentName[_VerticalAlignmentIndex[i]:_VerticalAlignmentIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _VerticalAlignmentNoOp() {
	var x [1]struct{}
	_ = x[VerticalAlignmentTop-(0)]
	_ = x[VerticalAlignmentCenter-(1)]
	_ = x[VerticalAlignmentBottom-(2)]
}

var _VerticalAlignmentValues = []VerticalAlignment{VerticalAlignmentTop, VerticalAlignmentCenter, VerticalAlignmentBottom}

var _VerticalAlignmentNameToValueMap = map[string]VerticalAlignment{
	_VerticalAlignmentName[0:3]:       VerticalAlignmentTop,
	_VerticalAlignmentLowerName[0:3]:  VerticalAlignmentTop,
	_VerticalAlignmentName[3:9]:       VerticalAlignmentCenter,
	_VerticalAlignmentLowerName[3:9]:  VerticalAlignmentCenter,
	_VerticalAlignmentName[9:15]:      VerticalAlignmentBottom,
	_VerticalAlignmentLowerName[9:15]: VerticalAlignmentBottom,
}

var _VerticalAlignmentNames = []string{
	_VerticalAlignmentName[0:3],
	_VerticalAlignmentName[3:9],
	_VerticalAlignmentName[9:15],
}

// VerticalAlignmentString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VerticalAlignmentString(s string) (VerticalAlignment, error) {
	if val, ok := _VerticalAlignmentNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _VerticalAlignmentNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VerticalAlignment values", s)
}

// VerticalAlignmentValues returns all values of the enum
func VerticalAlignmentValues() []VerticalAlignment {
	return _VerticalAlignmentValues
}

// VerticalAlignmentStrings returns a slice of all String values of the enum
func VerticalAlignmentStrings() []string {
	strs := make([]string, len(_VerticalAlignmentNames))
	copy(strs, _VerticalAlignmentNames)
	return strs
}

// IsAVerticalAlignment returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VerticalAlignment) IsAVerticalAlignment() bool {
	for _, v := range _VerticalAlignmentValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for VerticalAlignment
func (i VerticalAlignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for VerticalAlignment
func (i *VerticalAlignment) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VerticalAlignment should be a string, got %s", data)
	}

	var err error
	*i, err = VerticalAlignmentString(s)
	return err
}
