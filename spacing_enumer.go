// Code generated by "enumer -type=Spacing -json -transform=title-lower -trimprefix=Spacing"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SpacingName = "defaultnonesmallmediumlargeextraLargepadding"

var _SpacingIndex = [...]uint8{0, 7, 11, 16, 22, 27, 37, 44}

const _SpacingLowerName = "defaultnonesmallmediumlargeextralargepadding"

func (i Spacing) String() string {
	if i < 0 || i >= Spacing(len(_SpacingIndex)-1) {
		return fmt.Sprintf("Spacing(%d)", i)
	}
	return _SpacingName[_SpacingIndex[i]:_SpacingIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SpacingNoOp() {
	var x [1]struct{}
	_ = x[SpacingDefault-(0)]
	_ = x[SpacingNone-(1)]
	_ = x[SpacingSmall-(2)]
	_ = x[SpacingMedium-(3)]
	_ = x[SpacingLarge-(4)]
	_ = x[SpacingExtraLarge-(5)]
	_ = x[SpacingPadding-(6)]
}

var _SpacingValues = []Spacing{SpacingDefault, SpacingNone, SpacingSmall, SpacingMedium, SpacingLarge, SpacingExtraLarge, SpacingPadding}

var _SpacingNameToValueMap = map[string]Spacing{
	_SpacingName[0:7]:        SpacingDefault,
	_SpacingLowerName[0:7]:   SpacingDefault,
	_SpacingName[7:11]:       SpacingNone,
	_SpacingLowerName[7:11]:  SpacingNone,
	_SpacingName[11:16]:      SpacingSmall,
	_SpacingLowerName[11:16]: SpacingSmall,
	_SpacingName[16:22]:      SpacingMedium,
	_SpacingLowerName[16:22]: SpacingMedium,
	_SpacingName[22:27]:      SpacingLarge,
	_SpacingLowerName[22:27]: SpacingLarge,
	_SpacingName[27:37]:      SpacingExtraLarge,
	_SpacingLowerName[27:37]: SpacingExtraLarge,
	_SpacingName[37:44]:      SpacingPadding,
	_SpacingLowerName[37:44]: SpacingPadding,
}

var _SpacingNames = []string{
	_SpacingName[0:7],
	_SpacingName[7:11],
	_SpacingName[11:16],
	_SpacingName[16:22],
	_SpacingName[22:27],
	_SpacingName[27:37],
	_SpacingName[37:44],
}

// SpacingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SpacingString(s string) (Spacing, error) {
	if val, ok := _SpacingNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SpacingNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Spacing values", s)
}

// SpacingValues returns all values of the enum
func SpacingValues() []Spacing {
	return _SpacingValues
}

// SpacingStrings returns a slice of all String values of the enum
func SpacingStrings() []string {
	strs := make([]string, len(_SpacingNames))
	copy(strs, _SpacingNames)
	return strs
}

// IsASpacing returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Spacing) IsASpacing() bool {
	for _, v := range _SpacingValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Spacing
func (i Spacing) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Spacing
func (i *Spacing) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Spacing should be a string, got %s", data)
	}

	var err error
	*i, err = SpacingString(s)
	return err
}
