// Code generated by "enumer -type=ChoiceInputStyle -json -transform=title-lower -trimprefix=ChoiceInputStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ChoiceInputStyleName = "compactexpandedfiltered"

var _ChoiceInputStyleIndex = [...]uint8{0, 7, 15, 23}

const _ChoiceInputStyleLowerName = "compactexpandedfiltered"

func (i ChoiceInputStyle) String() string {
	if i < 0 || i >= ChoiceInputStyle(len(_ChoiceInputStyleIndex)-1) {
		return fmt.Sprintf("ChoiceInputStyle(%d)", i)
	}
	return _ChoiceInputStyleName[_ChoiceInputStyleIndex[i]:_ChoiceInputStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChoiceInputStyleNoOp() {
	var x [1]struct{}
	_ = x[ChoiceInputStyleCompact-(0)]
	_ = x[ChoiceInputStyleExpanded-(1)]
	_ = x[ChoiceInputStyleFiltered-(2)]
}

var _ChoiceInputStyleValues = []ChoiceInputStyle{ChoiceInputStyleCompact, ChoiceInputStyleExpanded, ChoiceInputStyleFiltered}

var _ChoiceInputStyleNameToValueMap = map[string]ChoiceInputStyle{
	_ChoiceInputStyleName[0:7]:        ChoiceInputStyleCompact,
	_ChoiceInputStyleLowerName[0:7]:   ChoiceInputStyleCompact,
	_ChoiceInputStyleName[7:15]:       ChoiceInputStyleExpanded,
	_ChoiceInputStyleLowerName[7:15]:  ChoiceInputStyleExpanded,
	_ChoiceInputStyleName[15:23]:      ChoiceInputStyleFiltered,
	_ChoiceInputStyleLowerName[15:23]: ChoiceInputStyleFiltered,
}

var _ChoiceInputStyleNames = []string{
	_ChoiceInputStyleName[0:7],
	_ChoiceInputStyleName[7:15],
	_ChoiceInputStyleName[15:23],
}

// ChoiceInputStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChoiceInputStyleString(s string) (ChoiceInputStyle, error) {
	if val, ok := _ChoiceInputStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChoiceInputStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChoiceInputStyle values", s)
}

// ChoiceInputStyleValues returns all values of the enum
func ChoiceInputStyleValues() []ChoiceInputStyle {
	return _ChoiceInputStyleValues
}

// ChoiceInputStyleStrings returns a slice of all String values of the enum
func ChoiceInputStyleStrings() []string {
	strs := make([]string, len(_ChoiceInputStyleNames))
	copy(strs, _ChoiceInputStyleNames)
	return strs
}

// IsAChoiceInputStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChoiceInputStyle) IsAChoiceInputStyle() bool {
	for _, v := range _ChoiceInputStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChoiceInputStyle
func (i ChoiceInputStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChoiceInputStyle
func (i *ChoiceInputStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChoiceInputStyle should be a string, got %s", data)
	}

	var err error
	*i, err = ChoiceInputStyleString(s)
	return err
}
