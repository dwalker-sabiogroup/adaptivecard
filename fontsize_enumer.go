// Code generated by "enumer -type=FontSize -json -transform=title-lower -trimprefix=FontSize"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FontSizeName = "defaultsmallmediumlargeextraLarge"

var _FontSizeIndex = [...]uint8{0, 7, 12, 18, 23, 33}

const _FontSizeLowerName = "defaultsmallmediumlargeextralarge"

func (i FontSize) String() string {
	if i < 0 || i >= FontSize(len(_FontSizeIndex)-1) {
		return fmt.Sprintf("FontSize(%d)", i)
	}
	return _FontSizeName[_FontSizeIndex[i]:_FontSizeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FontSizeNoOp() {
	var x [1]struct{}
	_ = x[FontSizeDefault-(0)]
	_ = x[FontSizeSmall-(1)]
	_ = x[FontSizeMedium-(2)]
	_ = x[FontSizeLarge-(3)]
	_ = x[FontSizeExtraLarge-(4)]
}

var _FontSizeValues = []FontSize{FontSizeDefault, FontSizeSmall, FontSizeMedium, FontSizeLarge, FontSizeExtraLarge}

var _FontSizeNameToValueMap = map[string]FontSize{
	_FontSizeName[0:7]:        FontSizeDefault,
	_FontSizeLowerName[0:7]:   FontSizeDefault,
	_FontSizeName[7:12]:       FontSizeSmall,
	_FontSizeLowerName[7:12]:  FontSizeSmall,
	_FontSizeName[12:18]:      FontSizeMedium,
	_FontSizeLowerName[12:18]: FontSizeMedium,
	_FontSizeName[18:23]:      FontSizeLarge,
	_FontSizeLowerName[18:23]: FontSizeLarge,
	_FontSizeName[23:33]:      FontSizeExtraLarge,
	_FontSizeLowerName[23:33]: FontSizeExtraLarge,
}

var _FontSizeNames = []string{
	_FontSizeName[0:7],
	_FontSizeName[7:12],
	_FontSizeName[12:18],
	_FontSizeName[18:23],
	_FontSizeName[23:33],
}

// FontSizeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FontSizeString(s string) (FontSize, error) {
	if val, ok := _FontSizeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FontSizeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FontSize values", s)
}

// FontSizeValues returns all values of the enum
func FontSizeValues() []FontSize {
	return _FontSizeValues
}

// FontSizeStrings returns a slice of all String values of the enum
func FontSizeStrings() []string {
	strs := make([]string, len(_FontSizeNames))
	copy(strs, _FontSizeNames)
	return strs
}

// IsAFontSize returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FontSize) IsAFontSize() bool {
	for _, v := range _FontSizeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FontSize
func (i FontSize) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FontSize
func (i *FontSize) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FontSize should be a string, got %s", data)
	}

	var err error
	*i, err = FontSizeString(s)
	return err
}
