// Code generated by "enumer -type=AssociatedInputs -json -transform=title-lower -trimprefix=AssociatedInputs"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AssociatedInputsName = "autonone"

var _AssociatedInputsIndex = [...]uint8{0, 4, 8}

const _AssociatedInputsLowerName = "autonone"

func (i AssociatedInputs) String() string {
	if i < 0 || i >= AssociatedInputs(len(_AssociatedInputsIndex)-1) {
		return fmt.Sprintf("AssociatedInputs(%d)", i)
	}
	return _AssociatedInputsName[_AssociatedInputsIndex[i]:_AssociatedInputsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AssociatedInputsNoOp() {
	var x [1]struct{}
	_ = x[AssociatedInputsAuto-(0)]
	_ = x[AssociatedInputsNone-(1)]
}

var _AssociatedInputsValues = []AssociatedInputs{AssociatedInputsAuto, AssociatedInputsNone}

var _AssociatedInputsNameToValueMap = map[string]AssociatedInputs{
	_AssociatedInputsName[0:4]:      AssociatedInputsAuto,
	_AssociatedInputsLowerName[0:4]: AssociatedInputsAuto,
	_AssociatedInputsName[4:8]:      AssociatedInputsNone,
	_AssociatedInputsLowerName[4:8]: AssociatedInputsNone,
}

var _AssociatedInputsNames = []string{
	_AssociatedInputsName[0:4],
	_AssociatedInputsName[4:8],
}

// AssociatedInputsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AssociatedInputsString(s string) (AssociatedInputs, error) {
	if val, ok := _AssociatedInputsNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AssociatedInputsNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AssociatedInputs values", s)
}

// AssociatedInputsValues returns all values of the enum
func AssociatedInputsValues() []AssociatedInputs {
	return _AssociatedInputsValues
}

// AssociatedInputsStrings returns a slice of all String values of the enum
func AssociatedInputsStrings() []string {
	strs := make([]string, len(_AssociatedInputsNames))
	copy(strs, _AssociatedInputsNames)
	return strs
}

// IsAAssociatedInputs returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AssociatedInputs) IsAAssociatedInputs() bool {
	for _, v := range _AssociatedInputsValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AssociatedInputs
func (i AssociatedInputs) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AssociatedInputs
func (i *AssociatedInputs) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AssociatedInputs should be a string, got %s", data)
	}

	var err error
	*i, err = AssociatedInputsString(s)
	return err
}
