// Code generated by "enumer -type=ImageStyle -json -transform=title-lower -trimprefix=ImageStyle"; DO NOT EDIT.

package adaptivecard

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ImageStyleName = "defaultperson"

var _ImageStyleIndex = [...]uint8{0, 7, 13}

const _ImageStyleLowerName = "defaultperson"

func (i ImageStyle) String() string {
	if i < 0 || i >= ImageStyle(len(_ImageStyleIndex)-1) {
		return fmt.Sprintf("ImageStyle(%d)", i)
	}
	return _ImageStyleName[_ImageStyleIndex[i]:_ImageStyleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ImageStyleNoOp() {
	var x [1]struct{}
	_ = x[ImageStyleDefault-(0)]
	_ = x[ImageStylePerson-(1)]
}

var _ImageStyleValues = []ImageStyle{ImageStyleDefault, ImageStylePerson}

var _ImageStyleNameToValueMap = map[string]ImageStyle{
	_ImageStyleName[0:7]:       ImageStyleDefault,
	_ImageStyleLowerName[0:7]:  ImageStyleDefault,
	_ImageStyleName[7:13]:      ImageStylePerson,
	_ImageStyleLowerName[7:13]: ImageStylePerson,
}

var _ImageStyleNames = []string{
	_ImageStyleName[0:7],
	_ImageStyleName[7:13],
}

// ImageStyleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImageStyleString(s string) (ImageStyle, error) {
	if val, ok := _ImageStyleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ImageStyleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImageStyle values", s)
}

// ImageStyleValues returns all values of the enum
func ImageStyleValues() []ImageStyle {
	return _ImageStyleValues
}

// ImageStyleStrings returns a slice of all String values of the enum
func ImageStyleStrings() []string {
	strs := make([]string, len(_ImageStyleNames))
	copy(strs, _ImageStyleNames)
	return strs
}

// IsAImageStyle returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImageStyle) IsAImageStyle() bool {
	for _, v := range _ImageStyleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ImageStyle
func (i ImageStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ImageStyle
func (i *ImageStyle) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ImageStyle should be a string, got %s", data)
	}

	var err error
	*i, err = ImageStyleString(s)
	return err
}
